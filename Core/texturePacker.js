// Generated by CoffeeScript 1.12.1
(function() {
  var TexturePacker, app, canvasBuffer, dialog, exports, fs;

  app = require('electron').remote;

  fs = require('fs');

  canvasBuffer = require('electron-canvas-to-buffer');

  dialog = app.dialog;

  exports = this;

  TexturePacker = (function() {
    TexturePacker.prototype.renderX = 0;

    TexturePacker.prototype.renderY = 0;

    TexturePacker.prototype.canvasWidth = 1280;

    TexturePacker.prototype.canvasHeight = 720;

    TexturePacker.prototype.currentMaxHeight = 0;

    function TexturePacker() {
      this.canvasNode = document.createElement("CANVAS");
      this.canvasNode.width = this.canvasWidth = $("#main").width();
      this.canvasNode.height = this.canvasHeight;
      this.canvasNode.style.border = "1px solid";
      $("#canvas-place").append(this.canvasNode);
      this.canvas = this.canvasNode.getContext("2d");
      this.BindEvents();
    }

    TexturePacker.prototype.RenderImages = function(paths) {
      var i, im, len, path, results, self;
      self = this;
      results = [];
      for (i = 0, len = paths.length; i < len; i++) {
        path = paths[i];
        im = new Image();
        im.src = path;
        results.push(im.onload = function() {
          return self.RenderImage(this);
        });
      }
      return results;
    };

    TexturePacker.prototype.RenderImage = function(image) {
      if (this.renderX >= this.canvasWidth) {
        this.renderX = 0;
        this.renderY += this.currentMaxHeight;
      }
      if (image.height > this.currentMaxHeight) {
        this.currentMaxHeight = image.height;
      }
      this.canvas.drawImage(image, this.renderX, this.renderY);
      return this.renderX += image.width;
    };

    TexturePacker.prototype.Clear = function() {
      this.canvasNode.width = 0;
      this.canvasNode.width = this.canvasWidth;
      return this.canvasNode.height = this.canvasHeight;
    };

    TexturePacker.prototype.BindEvents = function() {
      var addTextures, clear, exporter;
      addTextures = $("#add-textures");
      exporter = $("#export");
      clear = $("#clear");
      addTextures.click((function(_this) {
        return function() {
          return _this.Import();
        };
      })(this));
      exporter.click((function(_this) {
        return function() {
          return _this.Export();
        };
      })(this));
      return clear.click((function(_this) {
        return function() {
          return _this.Clear();
        };
      })(this));
    };

    TexturePacker.prototype.Export = function() {
      return dialog.showSaveDialog((function(_this) {
        return function(fileName) {
          var buffer;
          if (fileName == null) {
            return alert("no file selected");
          } else {
            buffer = canvasBuffer(_this.canvasNode, "image/png");
            return fs.writeFile(fileName, buffer, function(err) {
              if (err != null) {
                return alert("An error occured! " + err.message);
              } else {
                return alert("File Saved");
              }
            });
          }
        };
      })(this));
    };

    TexturePacker.prototype.Import = function() {
      return dialog.showOpenDialog({
        properties: ["multiSelections"],
        filters: [
          {
            name: "Images",
            extensions: ["png", "jpg", "jpeg", "tif"]
          }
        ]
      }, (function(_this) {
        return function(fileNames) {
          if (fileNames != null) {
            return _this.RenderImages(fileNames);
          } else {
            return alert("No File selected");
          }
        };
      })(this));
    };

    return TexturePacker;

  })();

  $(document).ready(function() {
    return exports.texturePacker = new TexturePacker();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dHVyZVBhY2tlci5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiU3JjXFx0ZXh0dXJlUGFja2VyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQSxNQUFBOztFQUFBLEdBQUEsR0FBTSxPQUFBLENBQVEsVUFBUixDQUFtQixDQUFDOztFQUMxQixFQUFBLEdBQUssT0FBQSxDQUFRLElBQVI7O0VBQ0wsWUFBQSxHQUFlLE9BQUEsQ0FBUSwyQkFBUjs7RUFDZixNQUFBLEdBQVMsR0FBRyxDQUFDOztFQUViLE9BQUEsR0FBVTs7RUFFSjs0QkFDRixPQUFBLEdBQVM7OzRCQUNULE9BQUEsR0FBUzs7NEJBQ1QsV0FBQSxHQUFhOzs0QkFDYixZQUFBLEdBQWM7OzRCQUNkLGdCQUFBLEdBQWtCOztJQUVMLHVCQUFBO01BQ1QsSUFBQyxDQUFBLFVBQUQsR0FBYyxRQUFRLENBQUMsYUFBVCxDQUF1QixRQUF2QjtNQUNkLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBWixHQUFvQixJQUFDLENBQUEsV0FBRCxHQUFlLENBQUEsQ0FBRSxPQUFGLENBQVUsQ0FBQyxLQUFYLENBQUE7TUFDbkMsSUFBQyxDQUFBLFVBQVUsQ0FBQyxNQUFaLEdBQXFCLElBQUMsQ0FBQTtNQUN0QixJQUFDLENBQUEsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFsQixHQUEyQjtNQUUzQixDQUFBLENBQUUsZUFBRixDQUFrQixDQUFDLE1BQW5CLENBQTBCLElBQUMsQ0FBQSxVQUEzQjtNQUVBLElBQUMsQ0FBQSxNQUFELEdBQVUsSUFBQyxDQUFBLFVBQVUsQ0FBQyxVQUFaLENBQXVCLElBQXZCO01BQ1YsSUFBQyxDQUFBLFVBQUQsQ0FBQTtJQVRTOzs0QkFXYixZQUFBLEdBQWMsU0FBQyxLQUFEO0FBQ1YsVUFBQTtNQUFBLElBQUEsR0FBTztBQUNQO1dBQUEsdUNBQUE7O1FBQ0ksRUFBQSxHQUFTLElBQUEsS0FBQSxDQUFBO1FBQ1QsRUFBRSxDQUFDLEdBQUgsR0FB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Sjs7UUFESjtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FYQTtJQURJOzs7Ozs7RUFrQlosQ0FBQSxDQUFFLFFBQUYsQ0FBVyxDQUFDLEtBQVosQ0FBa0IsU0FBQTtXQUNkLE9BQU8sQ0FBQyxhQUFSLEdBQTRCLElBQUEsYUFBQSxDQUFBO0VBRGQsQ0FBbEI7QUF2R0EiLCJzb3VyY2VzQ29udGVudCI6WyJhcHAgPSByZXF1aXJlKCdlbGVjdHJvbicpLnJlbW90ZVxyXG5mcyA9IHJlcXVpcmUoJ2ZzJylcclxuY2FudmFzQnVmZmVyID0gcmVxdWlyZSgnZWxlY3Ryb24tY2FudmFzLXRvLWJ1ZmZlcicpXHJcbmRpYWxvZyA9IGFwcC5kaWFsb2dcclxuXHJcbmV4cG9ydHMgPSB0aGlzXHJcblxyXG5jbGFzcyBUZXh0dXJlUGFja2VyXHJcbiAgICByZW5kZXJYOiAwXHJcbiAgICByZW5kZXJZOiAwXHJcbiAgICBjYW52YXNXaWR0aDogMTI4MFxyXG4gICAgY2FudmFzSGVpZ2h0OiA3MjBcclxuICAgIGN1cnJlbnRNYXhIZWlnaHQ6IDBcclxuXHJcbiAgICBjb25zdHJ1Y3RvcjogLT5cclxuICAgICAgICBAY2FudmFzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJDQU5WQVNcIilcclxuICAgICAgICBAY2FudmFzTm9kZS53aWR0aCA9IEBjYW52YXNXaWR0aCA9ICQoXCIjbWFpblwiKS53aWR0aCgpXHJcbiAgICAgICAgQGNhbnZhc05vZGUuaGVpZ2h0ID0gQGNhbnZhc0hlaWdodFxyXG4gICAgICAgIEBjYW52YXNOb2RlLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkXCJcclxuXHJcbiAgICAgICAgJChcIiNjYW52YXMtcGxhY2VcIikuYXBwZW5kKEBjYW52YXNOb2RlKVxyXG5cclxuICAgICAgICBAY2FudmFzID0gQGNhbnZhc05vZGUuZ2V0Q29udGV4dChcIjJkXCIpXHJcbiAgICAgICAgQEJpbmRFdmVudHMoKVxyXG5cclxuICAgIFJlbmRlckltYWdlczogKHBhdGhzKSAtPlxyXG4gICAgICAgIHNlbGYgPSBAICMgcmVmZXJlbmNlIGZvciBpbWFnZSBsb2FkaW5nXHJcbiAgICAgICAgZm9yIHBhdGggaW4gcGF0aHNcclxuICAgICAgICAgICAgaW0gPSBuZXcgSW1hZ2UoKVxyXG4gICAgICAgICAgICBpbS5zcmMgPSBwYXRoXHJcblxyXG4gICAgICAgICAgICBpbS5vbmxvYWQgPSAtPlxyXG4gICAgICAgICAgICAgICAgc2VsZi5SZW5kZXJJbWFnZSh0aGlzKVxyXG5cclxuICAgIFJlbmRlckltYWdlOiAoaW1hZ2UpIC0+XHJcbiAgICAgICAgaWYgQHJlbmRlclggPj0gQGNhbnZhc1dpZHRoXHJcbiAgICAgICAgICAgIEByZW5kZXJYID0gMFxyXG4gICAgICAgICAgICBAcmVuZGVyWSArPSBAY3VycmVudE1heEhlaWdodFxyXG5cclxuICAgICAgICBpZiBpbWFnZS5oZWlnaHQgPiBAY3VycmVudE1heEhlaWdodFxyXG4gICAgICAgICAgICBAY3VycmVudE1heEhlaWdodCA9IGltYWdlLmhlaWdodFxyXG5cclxuICAgICAgICBAY2FudmFzLmRyYXdJbWFnZShpbWFnZSwgQHJlbmRlclgsIEByZW5kZXJZKVxyXG5cclxuICAgICAgICBAcmVuZGVyWCArPSBpbWFnZS53aWR0aFxyXG5cclxuICAgIENsZWFyOiAtPlxyXG4gICAgICAgIEBjYW52YXNOb2RlLndpZHRoID0gMFxyXG5cclxuICAgICAgICBAY2FudmFzTm9kZS53aWR0aCA9IEBjYW52YXNXaWR0aFxyXG4gICAgICAgIEBjYW52YXNOb2RlLmhlaWdodCA9QGNhbnZhc0hlaWdodFxyXG5cclxuICAgIEJpbmRFdmVudHM6IC0+XHJcbiAgICAgICAgYWRkVGV4dHVyZXMgPSAkKFwiI2FkZC10ZXh0dXJlc1wiKVxyXG4gICAgICAgIGV4cG9ydGVyID0gJChcIiNleHBvcnRcIilcclxuICAgICAgICBjbGVhciA9ICQoXCIjY2xlYXJcIilcclxuXHJcbiAgICAgICAgYWRkVGV4dHVyZXMuY2xpY2sgPT5cclxuICAgICAgICAgICAgQEltcG9ydCgpXHJcblxyXG4gICAgICAgIGV4cG9ydGVyLmNsaWNrID0+XHJcbiAgICAgICAgICAgIEBFeHBvcnQoKVxyXG5cclxuICAgICAgICBjbGVhci5jbGljayA9PlxyXG4gICAgICAgICAgICBAQ2xlYXIoKVxyXG5cclxuICAgIEV4cG9ydDogLT5cclxuICAgICAgICBkaWFsb2cuc2hvd1NhdmVEaWFsb2cgKGZpbGVOYW1lKSA9PlxyXG4gICAgICAgICAgICBpZiBub3QgZmlsZU5hbWU/XHJcbiAgICAgICAgICAgICAgICBhbGVydChcIm5vIGZpbGUgc2VsZWN0ZWRcIilcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgYnVmZmVyID0gY2FudmFzQnVmZmVyKEBjYW52YXNOb2RlLCBcImltYWdlL3BuZ1wiKVxyXG5cclxuICAgICAgICAgICAgICAgICMgd3JpdGUgdGhlIGZvbnQgaW1hZ2VcclxuICAgICAgICAgICAgICAgIGZzLndyaXRlRmlsZSBmaWxlTmFtZSwgYnVmZmVyLCAoZXJyKSAtPlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIGVycj9cclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJBbiBlcnJvciBvY2N1cmVkISAje2Vyci5tZXNzYWdlfVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJGaWxlIFNhdmVkXCIpXHJcblxyXG4gICAgICAgICAgICAgICAgIyB3cml0ZSB0aGUgdGV4dHVyZSBhdGxhcyBKU09OXHJcbiAgICAgICAgICAgICAgICAjIGZzLndyaXRlRmlsZSBmaWxlTmFtZSArIFwiLmpzb25cIiwgSlNPTi5zdHJpbmdpZnkoQGZvbnRBdGxhcywgbnVsbCwgNCksIChlcnIpIC0+XHJcbiAgICAgICAgICAgICAgICAjICAgICBpZiBlcnI/XHJcbiAgICAgICAgICAgICAgICAjICAgICAgICAgYWxlcnQoXCJBbiBlcnJvciBvY2N1cmVkISAje2Vyci5tZXNzYWdlfVwiKVxyXG5cclxuICAgIEltcG9ydDogLT5cclxuICAgICAgICBkaWFsb2cuc2hvd09wZW5EaWFsb2cge1xyXG4gICAgICAgIHByb3BlcnRpZXM6XHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIFwibXVsdGlTZWxlY3Rpb25zXCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIGZpbHRlcnM6XHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW1hZ2VzXCJcclxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IFtcInBuZ1wiLCBcImpwZ1wiLCBcImpwZWdcIiwgXCJ0aWZcIl1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGZpbGVOYW1lcykgPT5cclxuICAgICAgICAgICAgaWYgZmlsZU5hbWVzP1xyXG4gICAgICAgICAgICAgICAgQFJlbmRlckltYWdlcyhmaWxlTmFtZXMpXHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGFsZXJ0KFwiTm8gRmlsZSBzZWxlY3RlZFwiKVxyXG5cclxuJChkb2N1bWVudCkucmVhZHkgLT5cclxuICAgIGV4cG9ydHMudGV4dHVyZVBhY2tlciA9IG5ldyBUZXh0dXJlUGFja2VyKClcclxuIl19
//# sourceURL=C:\dev\js\texturePacker\Src\texturePacker.coffee