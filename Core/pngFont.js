// Generated by CoffeeScript 1.12.1
(function() {
  var CHARS, PngFont, app, canvasBuffer, dialog, exports, fs;

  app = require('electron').remote;

  fs = require('fs');

  canvasBuffer = require('electron-canvas-to-buffer');

  dialog = app.dialog;

  exports = this;

  CHARS = "abcdefghijklmnopqrstuvwxyz";

  CHARS += CHARS.toUpperCase();

  CHARS += ".,<>/?";

  PngFont = (function() {
    var renderedFont;

    PngFont.prototype.renderX = 0;

    PngFont.prototype.renderY = 0;

    PngFont.prototype.fontSize = 18;

    PngFont.prototype.font = "monospace";

    PngFont.prototype.fontColor = "black";

    renderedFont = null;

    function PngFont() {
      this.canvasNode = document.createElement("CANVAS");
      this.canvasNode.width = $("#main").width();
      this.canvasNode.height = 300;
      this.canvasNode.style.border = "1px solid";
      $("#canvas-place").append(this.canvasNode);
      this.canvas = this.canvasNode.getContext("2d");
      this.BindUIEvents();
    }

    PngFont.prototype.RenderFont = function() {
      var char, chars, i, index, len;
      if (this.renderedFont != null) {
        $(this.renderedFont).remove();
        this.renderedFont = null;
      }
      this.fontAtlas = {
        "torch-texture-atlas": true,
        textures: {}
      };
      this.canvas.clearRect(0, 0, this.renderX, 400);
      this.renderX = 0;
      chars = CHARS.split("");
      for (index = i = 0, len = chars.length; i < len; index = ++i) {
        char = chars[index];
        this.RenderCharacter(char);
      }
      return this.ClipFontImage();
    };

    PngFont.prototype.RenderCharacter = function(char) {
      var width;
      this.canvas.fillStyle = this.fontColor;
      this.canvas.font = this.fontSize + "px " + this.font;
      width = this.canvas.measureText(char).width;
      this.canvas.fillText(char, this.renderX, this.fontSize);
      this.fontAtlas.textures[char] = {
        name: char,
        clipX: this.renderX,
        clipY: this.renderY,
        clipWidth: width,
        clipHeight: this.fontSize * 1.5
      };
      return this.renderX += width;
    };

    PngFont.prototype.ClipFontImage = function() {
      var canvas, clipHeight, imageData, newCanvas;
      clipHeight = this.fontSize * 1.5;
      imageData = this.canvas.getImageData(0, 0, this.renderX, clipHeight);
      newCanvas = document.createElement("CANVAS");
      newCanvas.width = this.renderX;
      newCanvas.height = clipHeight;
      newCanvas.style.border = "1px solid green";
      $("#rendered-font").append(newCanvas);
      canvas = newCanvas.getContext("2d");
      canvas.putImageData(imageData, 0, 0);
      return this.renderedFont = newCanvas;
    };

    PngFont.prototype.BindUIEvents = function() {
      var fontName, saveFont;
      fontName = $("#font-name");
      saveFont = $("#save-font");
      fontName.change((function(_this) {
        return function() {
          _this.font = fontName.val();
          return _this.RenderFont();
        };
      })(this));
      return saveFont.click((function(_this) {
        return function() {
          return _this.SaveFile();
        };
      })(this));
    };

    PngFont.prototype.SaveFile = function() {
      return dialog.showSaveDialog((function(_this) {
        return function(fileName) {
          var buffer;
          if (fileName == null) {
            return alert("no file selected");
          } else {
            buffer = canvasBuffer(_this.renderedFont, "image/png");
            fs.writeFile(fileName, buffer, function(err) {
              if (err != null) {
                return alert("An error occured! " + err.message);
              } else {
                return alert("File Saved");
              }
            });
            return fs.writeFile(fileName + ".json", JSON.stringify(_this.fontAtlas, null, 4), function(err) {
              if (err != null) {
                return alert("An error occured! " + err.message);
              }
            });
          }
        };
      })(this));
    };

    PngFont.prototype.OpenFont = function() {
      return dialog.showOpenDialog((function(_this) {
        return function(fileNames) {
          if (fileNames != null) {

          } else {
            return alert("No File selected");
          }
        };
      })(this));
    };

    return PngFont;

  })();

  $(document).ready(function() {
    var pngFont;
    pngFont = exports.pngFont = new PngFont();
    return pngFont.RenderFont();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\dev\js\texturePacker\Src\pngFont.coffee